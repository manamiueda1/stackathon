{"ast":null,"code":"var _objectWithoutProperties = require(\"/Users/manamiueda/stackathon1/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nconst resolvePaths = require('./utils/resolvePaths');\n\nconst circularize = require('./utils/circularize');\n\nconst createJob = require('./createJob');\n\nconst _require = require('./utils/log'),\n      log = _require.log;\n\nconst getId = require('./utils/getId');\n\nconst _require2 = require('./constants/config'),\n      defaultOEM = _require2.defaultOEM;\n\nconst _require3 = require('./worker/node'),\n      defaultOptions = _require3.defaultOptions,\n      spawnWorker = _require3.spawnWorker,\n      terminateWorker = _require3.terminateWorker,\n      onMessage = _require3.onMessage,\n      loadImage = _require3.loadImage,\n      send = _require3.send;\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n\n  const _resolvePaths = resolvePaths({ ...defaultOptions,\n    ..._options\n  }),\n        logger = _resolvePaths.logger,\n        errorHandler = _resolvePaths.errorHandler,\n        options = _objectWithoutProperties(_resolvePaths, [\"logger\", \"errorHandler\"]);\n\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n\n  const load = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options\n    }\n  }));\n\n  const loadLanguage = (langs = 'eng', jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs,\n      options\n    }\n  }));\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs,\n      oem\n    }\n  }));\n\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n\n  const recognize = async (image, opts = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'recognize',\n    payload: {\n      image: await loadImage(image),\n      options: opts\n    }\n  }));\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'getPDF',\n    payload: {\n      title,\n      textonly\n    }\n  }));\n\n  const detect = async (image, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'detect',\n    payload: {\n      image: await loadImage(image)\n    }\n  }));\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data,\n          length: Object.keys(data).length\n        });\n      }\n\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n};","map":{"version":3,"sources":["/Users/manamiueda/stackathon1/node_modules/tesseract.js/src/createWorker.js"],"names":["resolvePaths","require","circularize","createJob","log","getId","defaultOEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","_options","id","logger","errorHandler","options","resolves","rejects","worker","setResolve","action","res","setReject","rej","startJob","jobId","payload","Promise","resolve","reject","workerId","load","loadLanguage","langs","initialize","oem","setParameters","params","recognize","image","opts","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","length","Object","keys","Error"],"mappings":"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","sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = jobId => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }))\n  );\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}